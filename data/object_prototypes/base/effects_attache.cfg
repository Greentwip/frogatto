{
id: "effects_attache",
prototype: ["transient_object"],
is_strict: false,
activation_border: 5000,
serializable: false,



properties: {
#-------------------------- constructors/destructors --------------------------#
	/*
		Major warning here - our constructor runs *not only* when the object is first created, but will also be run every time the object is re-added to the game - if it's i.e. an object like a fiery glow that gets removed and added to an object.  The destructor will fire every time it's ripped off the original object, as well - we need to make sure nothing we fire in the constructor is a true 'can only happen once in an object's lifetime' command.  Currently we use no such things, so if they ever need to be added, we'll need to add some sort of guard statement to keep them from firing twice (all such setup events should be triggered in separate execution frames so we should be able to safely assume the side-effects from an earlier execution (such as a bool indicating we've previously been set up) will be visible to the later execution frame.
	*/

	hittable_obj_constructor: "[attach_to_spawner, do_setup, bind_command(def() turn_on)]",
	hittable_obj_destructor: "additional_death_cleanup",

	//double_invocation_check: "commands :: if(not already_spawned, set(already_spawned, true))
	//already_spawned: { type:"bool", default: false },

	debug_output_ea: "bool :: false",

	root_parent_object: "obj transient_object ::
		if(me._parent_obj is obj effects_attache, me._parent_obj.root_parent_object, me._parent_obj)
	",


#-------------------------- vars --------------------------#
		/*
			note;  time_to_die is *not* a value for "how long after creation this thing self-deletes".  That's scheduled_death_at.  Rather, time_to_die is a setting that describes how long we delay object deletion after this object considers itself 'dead' - some particle systems need to stop spawning particles, and only delete themselves after all the particles have had time to expire.
		*/
	time_to_die: { type: "int", dynamic_initialization: true },
	scheduled_death_at: { type: "int|null", default: null },
	recorded_transfer_at: { type: "int|null", default: null },
	still_failing_debug_check: { type: "bool", default: false },
	
	custom_relative_pos_default: { type: "{mid_x: decimal, mid_y: decimal}|null", default: null },
#-------------------------- connections --------------------------#
	_parent_obj: "(obj transient_object <- me.parent)
						asserting not (me.parent = null) | 'An object of type:' + me.type + ' and _addr:' + addr(me) + ' ended up without a parent object.  The design of this prototype demands that these objects always have a parent, period.  They need one upon creation, and if a parent dies, it must immediately remove all child objects of this type.'",
	
	attach_to_spawner: "commands :: if(not me in _parent_obj._effects_attaches, add(_parent_obj._effects_attaches, [me]))",
	remove_from_spawner: "commands ::	if(me in _parent_obj._effects_attaches,
											; set(_parent_obj._effects_attaches,
												filter(_parent_obj._effects_attaches, value != me)
											)
										)",

#-------------------------- cosmetics --------------------------#
	relative_pos_default: "{mid_x: decimal, mid_y: decimal} :: if(custom_relative_pos_default, custom_relative_pos_default, { mid_x: 0, mid_y: 0 })",
	initialize_position: "commands :: execute(me, [
						set(relative_x, relative_pos_default.mid_x),
						set(relative_y, -relative_pos_default.mid_y),
					])",

#-------------------------- logic --------------------------#
	additional_death_cleanup: "commands :: null",

		//this is exactly like `schedule_death_cleanup`, but we reserve it for cases where we might invoke a transfer, but we really for-sure want this effects_attache to get cleaned up and removed.
	schedule_forced_death_cleanup: "commands :: execute(me, [
										set(currently_forcing_death, true)
										;
										schedule_death_cleanup
									])",

	schedule_death_cleanup: "commands :: execute(me, [
								turn_off,
								set(always_active, true),

								set(me.scheduled_death_at, me.cycle+time_to_die),
								if(debug_output_ea, debug('scheduled death of ${me.type} at ${cycle+time_to_die}')),

								schedule(time_to_die, ; [
									/*								
										We can basically 'cancel' our death by anulling this scheduled_death_at value.  We want to do this if we're being transferred rather than our parent actually dying; this basically is our 'signal' that the death was a transfer.  We could do that with boolean flag, but we need to preserve the metadata of *which* death was being cancelled, because if we do a transfer and then the transferee gets killed, we want the final death to still be able to clean us up.
										
										Because of this we use a second numerical value; `recorded_transfer_at`.  It uses the same numerical calculation to generate the timestamp, so if it's the same as any `scheduled_death_at`, that means that particular death was a transfer, not an actual destruction.
										
										---
										
										One thing to be aware of is that this is designed to handle situations where the parent immediately kills itself.  A very common pattern we use is one where at the very moment of death for a 'thrown' object, we respawn one of the original objects that held it in place of where it currently sits.  We set all relevant variables for that object to be the same as the thrown object.  We do this to ensure that any special death code for the parent correctly gets run.
										
										As a design strategy, if this really breaks down, we still can't directly execute that code because of its calling context, but we can at least perhaps ditch the 'soft' part of this pattern - we still assume that the new object might want to cancel its death or something, and respawn with its old attaches.  If it becomes necessary, perhaps we'll switch to a 'hard' setup where if you're flagged for death, you just kill all your attaches, period.
									*/
								 
									if(debug_output_ea,
										debug('considering scheduled death of ${me.type} at ${me.cycle} with scheduled value ${me.scheduled_death_at} and transfer time ${recorded_transfer_at}')
									),
									if(me.scheduled_death_at = me.cycle,
										if(me.recorded_transfer_at != me.cycle or currently_forcing_death, [
											additional_death_cleanup ;
											remove_from_spawner,
											remove_object(me)
										],[
											set(me.scheduled_death_at, null),
										])
									)
								])
							]) asserting me is obj effects_attache",

	do_setup: "commands :: [initialize_position]",
	turn_on: "commands :: null",
	turn_off: "commands :: null",
	
	is_alive: "bool :: scheduled_death_at = null and (not currently_forcing_death) and if(recorded_transfer_at != null, (scheduled_death_at != recorded_transfer_at), true)",
	
	currently_forcing_death: { type: "bool", default: false },

	debug_check: "if(scheduled_death_at != null, set(still_failing_debug_check, true)
	
		asserting (not (still_failing_debug_check = true and scheduled_death_at = null)) and (not (scheduled_death_at = null and _parent_obj.hitpoints < 0)) | q(An effects object of type:' + me.type + ' and _addr:' + addr(me) + ' has become orphaned; if its parent dies and it doesn't have a cleanup scheduled, something has gone quite wrong.  Parents are supposed to always force these to die)
	 
	 )",
	 
#-------------------------- core behavior --------------------------#
	on_process_wrapper: "def(commands do_process_handling) -> commands
							do_process_handling
						",

	handle_processing: "commands :: on_process_wrapper( [handle_specialized_processing] )",
	handle_specialized_processing: "commands :: null",
},

on_process: "handle_processing",


timer_frequency: 10,
on_timer: "debug_check",


	//we're using this semi-obscure event to help prevent overwriting of necessary behavior, since overriding on_create without calling the superclass implementation is extremely common.  Virtually nothing uses this event, so it's almost certain not to be overridden.
/*
on_create: "constructor",
on_spawned: "constructor",
on_being_added: "constructor",

on_being_removed: "destructor",
*/

animation: {
	id: "normal",
	image: "effects/particles.png",
	x: 86, y: 73, w: 0, h: 0,
	duration: -1,
},

}
