{
id: "transient_object",
prototype: ["cosmetic_effects"],
is_strict: false,

#	Transient objects are objects which are expected to occasionally get added-to, and removed-from the active game.

#	The main purpose of this prototype is to define common semantics for constructors/destructors, and to provide a certain set of really tricky behavior for them that's common to many objects, and is really tricky to get right, such as copy-constructors, and so on.  Some of this, like the copy-constructor stuff, will have to be duplicated inside of hittable because different properties need to be copied in there, but some of it at least will definitely be global.

#	The main thing these semantics enable is attaches - whilst hittable_attaches make no sense for objects that can't take damage, effects_attaches are display-only, and it's quite desirable to have things like shadows (or even glowing effects of some kind) on damage-agnostic entities like NPCs and so on.

#	One big style point we have here is we provide a few virtual functions we know are going to be needed, so that at the first few prototype tiers we don't have to do a boilerplate hook to the next level of functions.  Beyond that, we'll need to do a pattern where we do e.g.  `foo_prototype_destructor: "[custom_destructor, (foo code here)]"`


properties: {
#-------------------------- global values --------------------------#
	_effects_attaches: { type: "[obj effects_attache]", default: [], persistent: false },



	_all_attaches: "[obj hittable_attache|obj effects_attache] :: _effects_attaches",


	readd_attaches: "def(obj transient_object new_obj) -> commands
		map(new_obj._all_attaches, 
			[
				add_object(value),
			]
		)",
		
	remove_attaches: "def(obj transient_object the_obj) -> commands
		map(the_obj._all_attaches, [
			remove_object(value),
//			debug('removing ' + str(value.type) + ' from ' + str(the_obj.type))
		])",


#-------------------------- constructors --------------------------#
	constructor: "commands :: execute(me,[
					transient_obj_constructor ;
					hittable_obj_constructor ;
					epihittable_obj_constructor ;
					visual_obj_constructor
				])",


	transient_obj_constructor: "commands :: null",

	hittable_obj_constructor: "commands :: null",	//for the hittable prototype

	epihittable_obj_constructor: "commands :: null",		//for prototypes at the tier immediately above hittable; like `moveable_enemy` and so on.  If we go past that, we're gonna define some functions at that point, and call them from whatever class (i.e. `movable_enemy`) they're defined in, inside this function.

	visual_obj_constructor: "commands :: null",	//for NPCs and so on


		/*
			This exists to keep us from double-invoking a constructor.  It's very important that this not be `persistent`, because if we load from a save, we need this to be back at its default value of false so we re-construct the effects_attaches.
			
			Note that this is specifically about the "barrage" of events that can cause construction when an object is first made ... or possibly present on the level at the start ... or added by another object, or any one of the variety of things that could bring an object into existence, several of which (legitimately) trigger multiple events in the object simultaneously.  For example, if an object is added it's also going to be created, and we want to have a wide dragnet to catch any possible 'natal' situation for an object, so this is the funnel, right here, that ensures they all concatenate into just a single setup call.
			
			---
			
			There is one situation where we want to actually re-invoke this, and this is the (rare in usage) situation where we've got an effects attache that is stored as a reference in the parent object, but occasionally gets removed, and then re-added.  Without this, their do_setup call will fail to trigger on all subsequent spawns, which is fine if do_setup does nothing but set variables (like relative_positioning) in the attache.  However ... if do_setup does things like actually adding sub-sub-objects (childen of its own, forming an object tree), then these operations are no longer persistent, since a destructor would clean them up.
		*/
	_constructed: { type: "bool", default: false, persistent: false },
	_constructor_guarded: "commands :: ( ; if(not _constructed, [constructor, set(_constructed, true)]))",

		#-- debug flags --#	
	should_debug_output_constructor_info: "bool :: false",
	constructor_debug: "def(string the_event_name) -> commands if(should_debug_output_constructor_info,  debug(the_event_name + ' at ${level.cycle} ${me.type} ${addr(me)}'))",


#-------------------------- destructors --------------------------#
	destructor: "commands :: execute(me,[
					transient_obj_destructor ;
					hittable_obj_destructor ;
					epihittable_obj_destructor ;
					visual_obj_destructor ;
					
					/*
						If we actually deliberately remove and re-add the attache, we need the constructor to re-fire (once per add-remove cycle).  This is explained at length above.
					*/
					set(_constructed, false)
				])",


	
	transient_obj_destructor: "commands :: execute(me,[
					map(me._effects_attaches, value.schedule_death_cleanup)
				])",

	hittable_obj_destructor: "commands :: null",	//for the hittable prototype

	epihittable_obj_destructor: "commands :: null",		//for prototypes at the tier immediately above hittable; like moveable_enemy and so on

	visual_obj_destructor: "commands :: null",	//for NPCs and so on


#-------------------------- messy, non-generic convenience functions --------------------------#
	physical_size: "int :: 16",

		//for openly displaying a palmed item to the player.  We were considering putting this in the standing_npc prototype, but it also needs to be used by the player, so hell - let's just make it available to everything.
	item_presentation_offset: "{x: int, y: int} :: {x: -20, y: -40 }",


		//some enemies like NPCs stand further back in the scene, and need to slightly adjust the position of their shadow, accordingly.
	shadow_vertical_offset: "int :: 0",
	spawn_shadow: "def(string size_class) -> commands execute(me, [
									if( preexisting_shadow = null,
										spawn('shadow_attache',mid_x,mid_y,{parent: me, size_class: size_class, time_to_die: 0})
									) where preexisting_shadow = find(me._effects_attaches, value is obj shadow_attache)
									
									])",





},

	on_create: "[_constructor_guarded, constructor_debug('create')]",
		/*
			we're using this semi-obscure event to help prevent overwriting of necessary behavior, since overriding on_create without calling the superclass implementation is extremely common.  Virtually nothing uses this event, so it's almost certain not to be overridden.
		*/
	on_done_create: "[_constructor_guarded, constructor_debug('done_create')]",
	on_load: "[_constructor_guarded, constructor_debug('load')]",
	on_load_checkpoint: "[_constructor_guarded, constructor_debug('load_checkpoint')]",

	on_being_added: "[_constructor_guarded, constructor_debug('being_added')]",
	on_being_removed: "[destructor, constructor_debug('removed')]",



}
